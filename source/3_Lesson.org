#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: Touring Turing
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/7-CS-Turing">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* What is 'Conditional Selection'
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- One of the important aspects of a Turing machine, is the ability to change the tape, depending on what was written on some programmed cards.
- So, for instance, if the Turing machine was at box 500 on the tape, =if= the symbol written there was a 1 - it would move the tape forward, =else= if the symbol that was written there was a 0 the machine would move the tape backwards.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- This is know as =Conditional Selection=.
- If you want to imagine using =Conditional Selection= in real life, think about a simple decision you might make before leaving the house in the morning.
#+begin_quote
If it is cold I will take my coat, else I'll leave it at home.
#+end_quote
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

- Let's try and code the above example using python.
- Open IDLE and create a new script (=Ctrl+n=) called =coat.py=
- We need to start by creating a variable to store whether it is cold or not.
- On the first line of your script write the following line.
#+begin_src python
coldOutside = True
#+end_src
- =True= is a keyword in Python.
- Now we're going to start our conditional selection. Write this line next.
#+begin_src python
if coldOutside == True:
#+end_src
- The double equals is known as a =test for equality=. In Python a single equals is used for assigning variables. A double equals tests if two things are the same.
- The =:= is important. It tells the computer that we have finished stating the =condition=. In this case that =coldOutside = True=
- Now hit =Enter= on your keyboard and stop.
[[file:img/whitespace.png]]
- The cursor has automatically been placed 4 spaces in, leaving what is known as =significant whitespace= where you are going to write your next line.
- If you accidenctly delete the whitespace (do it now), you can add it back in by using the =Tab= key on your keyboard.
[[file:img/tab.jpg]]
- Let's write the next line
#+begin_src python
  if coldOutside == True:
      print('You had better take your coat')
#+end_src
- Because the =print()= statement is written after the significant white space, it will only be executed if the line above it is =True=.
- What happens if coldOutside isn't =True=?
- We need to prepare for that as well.
#+begin_src python
  if coldOutside == True:
      print('You had better take your coat')
  else:
      print('Leave your coat at home')
#+end_src
- Notice that the =else:= has no whitespace before it.
- The =print()= statement under the =else:= condition, only runs if =coldOutside= is not =True=
- =Ctrl+s= and then =F5= to save and run your script.
- Now try changing the variable =coldOutside= from =True= to =False=
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Now it's your turn to write some conditional selection scripts. Make sure you use sensible variable names
- Try the following:
  1. Write a script that prints out whether you should have a snack based on whether you are hungry or not.
  2. Write a script that prints out whether you should have a sleep or not based on whether you are tired or not.
  3. Write a script that prints out whether you should take a bus or not based on whether your journey is a long one.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We can use conditional selection to test for pretty much anything, not just whether a variable is =True= or =False=.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Let's make a little chatbot.
#+begin_src python
  name = 'Alice'
  if name == 'Alice':
      print('Nice to meet you ' + name)
  else:
      print('I wanted to speak to Alice, not ' + name)
#+end_src
- We can make this script a little more interactive by using =input()= like we did in the previous lesson
#+begin_src python
  name = input('Hi, what is your name? ')
  if name == 'Alice':
      print('Nice to meet you ' + name)
  else:
      print('I wanted to speak to Alice, not ' + name)
#+end_src
- You can change what the script replies if you like.
- Let's extend it a little. Add a second block of conditional selection to your script, underneath the first.
#+begin_src python
  pets = input('Do you have any pets? ')
  if pets == 'yes':
      print("That's nice. I love pets")
  else:
      print("That's a shame. You should buy a dog")
#+end_src
- Add a few more questions and responses of your own, to extend the chatbot.
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- We can use Conditional Selection to make a quiz.
- Have a look at the script below.
#+begin_src python
  score = 0

  userAnswer1 = input('What is the capital city of England?' )
  if userAnswer1 == 'London':
      print('Correct')
      score = score + 1
  else:
      print('Incorrect')
#+end_src
- The first line creates a variable called =score= and sets it to 0
- This line
#+begin_src python
score = score + 1
#+end_src
- adds 1 to the score. As it has whitespace before it, it only runs when the user gets the answer correct.
- Add 9 more questions to your script.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- It would be nice if we could print out the score at the end of the quiz.
- There's a slight problem though.
- Try this as the last line of code.
#+begin_src python
print('You scored ' + score)
#+end_src
- Run through the quiz and see what happens.
- The problem is the same as we experienced in the last lesson. The string ='You scored '= and the integer =score= are different types, and you can't =concatenate= different types in Python (Do you still remember what =concatenate= means).
- This time we'll use the inbuilt function =str()=.
- This converts numbers to strings. So if the score was =6= it would convert it to '6'
- Change your last line of code so it looks like the one below.
#+begin_src python
print('You scored ' + str(score))
#+end_src


** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

